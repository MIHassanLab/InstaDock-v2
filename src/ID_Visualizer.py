# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VisualizerGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import random
import shutil
import ID_utils
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets
from http.server import HTTPServer, SimpleHTTPRequestHandler
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QDesktopWidget, QHBoxLayout, QSpacerItem, QSizePolicy, QWidget, QToolButton, QApplication, QGridLayout, QVBoxLayout, QGroupBox, QLabel, QPushButton, QFrame

HOST = '127.0.0.1'
port = random.randint(1024, 65535)

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', '*')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.send_header('Cache-Control', 'no-store, no-cache, must-revalidate')
        return super(CORSRequestHandler, self).end_headers()

class HttpDaemon(QtCore.QThread):
    def run(self):
        self._server = HTTPServer((HOST, port), CORSRequestHandler)
        self._server.serve_forever()

    def stop(self):
        self._server.shutdown()
        self._server.socket.close()
        self.wait()

class CustomTitleBar(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.initial_pos = None
        title_bar_layout = QHBoxLayout(self)
        title_bar_layout.setContentsMargins(1, 1, 1, 1)
        title_bar_layout.setSpacing(2)

        # Spacer to push buttons to the right
        title_bar_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))

        # Min button
        self.min_button = QToolButton(self)
        self.min_button.setText("\u005F")      
        self.min_button.setFixedSize(QSize(24, 24))
        self.min_button.clicked.connect(self.window().showMinimized)
        self.min_button.setFocusPolicy(Qt.NoFocus)
        #self.min_button.setStyleSheet('''
        #    QToolButton::menu-indicator { image: none; } 
        #    QToolButton { background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(206, 255, 188, 255), 
        #                              stop:0.255682 rgba(212, 255, 179, 255), stop:0.636364 rgba(168, 255, 89, 255), stop:1 rgba(122, 255, 0, 255));
        #                              padding: 2px; border-radius: 6px; border: 1px solid #b5b3b5;
        #        padding: 20px; font-size: 10pt;}
        #    QToolButton::hover { background-color: lightgreen;}
        #                              ''')
        title_bar_layout.addWidget(self.min_button)

        # Close button
        self.close_button = QToolButton(self)
        self.close_button.setText("\u00D7")
        self.close_button.setStyleSheet("color:darkred;")
        self.close_button.setFixedSize(QSize(24, 24))
        self.close_button.clicked.connect(self.window().close)
        self.close_button.setFocusPolicy(Qt.NoFocus)
        #self.close_button.setStyleSheet('''
        #    QToolButton::menu-indicator { image: none; } 
        #    QToolButton { background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 188, 188, 255), 
        #                                stop:0.255682 rgba(255, 179, 179, 255), stop:0.636364 rgba(255, 89, 89, 255), stop:1 rgba(255, 0, 0, 255));
        #                                padding: 2px; border-radius: 6px; border: 1px solid #b5b3b5; color: black; font-weight:bold;
        #        padding: 20px; font-size: 10pt;}
        #    QToolButton::hover {background-color: red;}
        #                               ''')
        title_bar_layout.addWidget(self.close_button)

    def changeEvent(self, event):
        super().changeEvent(event)
        event.accept()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.initial_pos = event.pos()
        super().mousePressEvent(event)
        event.accept()

    def mouseMoveEvent(self, event):
        try:
            if self.initial_pos is not None:
                delta = event.pos() - self.initial_pos
                self.window().move(
                    self.window().x() + delta.x(),
                    self.window().y() + delta.y(),
                )
        except Exception as e:
            pass
        super().mouseMoveEvent(event)
        event.accept()

    def mouseReleaseEvent(self, event):
        self.initial_pos = None
        super().mouseReleaseEvent(event)
        event.accept()


class WebEngineWindow(QMainWindow):
    def __init__(self, compname, parent=None):
        super().__init__(parent)
        self.setWindowTitle("IDv2 Visualizer")
        self.resize(800, 600)
        
        # Create a QWebEngineView widget
        self.view = QtWebEngineWidgets.QWebEngineView(self)
        self.setCentralWidget(self.view)
        
        # Set the default settings so local content can access remote URLs.
        settings = QtWebEngineWidgets.QWebEngineSettings.defaultSettings()
        settings.setAttribute(QtWebEngineWidgets.QWebEngineSettings.LocalContentCanAccessRemoteUrls, True)
        
        # Connect the download request signal to parent's slot if needed.
        # Here we assume the parent (idVisualizer) has an on_downloadRequested method.
        self.view.page().profile().downloadRequested.connect(parent.on_downloadRequested)
        
        # Build the URL using the computed HTML filename.
        url = QtCore.QUrl(f"http://{HOST}:{port}/Selected_Docked_Compelex(es)/{compname}")
        self.view.load(url)

class idVisualizer(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)
    def center_above_screen(self):
        screen_geometry = QDesktopWidget().screenGeometry()
        window_geometry = self.frameGeometry()
        screen_center = screen_geometry.center()
        window_geometry.moveCenter(screen_center)
        self.move(window_geometry.topLeft())

    def __init__(self):
        super().__init__()
        self.setWindowIcon(QIcon(':/IDLogo.png'))
        self.setWindowTitle("IDv2 Visualizer")
        self.resize(300, 400)
        self.is_dark_mode = False
        self.center_above_screen()
        self.setStyleSheet("""
        QMainWindow {
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, 
            stop:0 #F5F7FA, 
            stop:0.5 #E4E7EB, 
            stop:1 #D9DEE4); /* Light and minimalistic gradient */
            color: #000000; /* Default dark text */
            border: 1px solid #A9A9A9;
        }
        
        QLabel{
            background: transparent;
            font-size: 14px;
            font-family: "Arial";
        }
                           
        QLabel#browseWDLabel{
            background: transparent;
            font-size: 14px;
            border: 1px solid #A9A9A9;
            border-radius: 3px;
        }
        
        QGroupBox{
            border:0;
            background: transparent;
        }

        QPushButton {
            font-size: 14px; /* Matches the font size */
            padding: 2px 8px; /* Inner spacing */
            border: 1px solid #A9A9A9; /* Default border */
            border-radius: 3px; /* Rounded corners */
            color: black; /* Default text color */
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #F2F2F2, stop:0.5 #EBEBEB, stop:0.51 #DDDDDD, stop:1 #CFCFCF); /* Subtle 3D gradient */
        }

        QPushButton:hover {
            border: 1px solid #A9A9A9; /* Light border on hover */
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #EAF6FD, stop:0.5 #D9F0FC, stop:0.51 #BEE6FD, stop:1 #A7D9F5); /* Light blue gradient on hover */
        }

        QPushButton:pressed {
            padding: 2px 7px 3px 9px; /* Slight padding shift for pressed effect */
            border: 1px solid #A9A9A9; /* Darker border when pressed */
            border-bottom: 0px; /* Simulates "pressing in" by hiding the bottom border */
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #E5F4FC, stop:0.5 #C4E5F6, stop:0.51 #98D1EF, stop:1 #68B3DB); /* Darker gradient when pressed */
        }
                            
        QPushButton:checked {
            padding: 2px 7px 3px 9px; /* Slight padding shift for pressed effect */
            border: 1px solid #A9A9A9; /* Darker border when pressed */
            border-bottom: 0px; /* Simulates "pressing in" by hiding the bottom border */
            background: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #E5F4FC, stop:0.5 #C4E5F6, stop:0.51 #98D1EF, stop:1 #68B3DB); /* Darker gradient when pressed */
        }
                           
        QPushButton#startButton{
            font-size: 20px;
        }
    
    """
    )
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy2 = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Minimum)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy3 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy4 = QSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.MinimumExpanding)
        sizePolicy4.setHorizontalStretch(0)
        sizePolicy4.setVerticalStretch(0)

        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QSize(300, 400))
        self.setWindowFlags(Qt.FramelessWindowHint)
        central_widget = QWidget()
        central_widget.setObjectName("Container")
        self.title_bar = CustomTitleBar(self)

        central_widget_layout = QVBoxLayout()
        central_widget_layout.setContentsMargins(0, 0, 0, 0)
        central_widget_layout.setAlignment(Qt.AlignTop)

        central_widget_layout.addWidget(self.title_bar)

        work_space_layout = QVBoxLayout()
        work_space_layout.setContentsMargins(11, 11, 11, 11)

        # Intro label
        self.introLabel = QLabel(self)
        self.introLabel.setObjectName("introLabel")
        self.introLabel.setTextFormat(Qt.RichText)
        self.introLabel.setText('''
        <span style="font-size: 13px; font-family: Arial;"> 
        This module provides an interactive visualizer for protein-ligand complexes in PDB/PDBQT formats,  
        enabling users to explore molecular interactions with clarity!<br/>
        Its intuitive design allows both beginners and experts to navigate molecular data easily.  
        The tool highlights key binding sites, structural features, and molecular interactions,  
        making it an invaluable resource for molecular research.<br/>
        Additionally, it offers customizable visualization options to enhance analysis and usability.  
        </span>
        ''')

        self.introLabel.setWordWrap(True)
        self.introLabel.setSizePolicy(sizePolicy)
        self.introLabel.setAlignment(Qt.AlignJustify)
        work_space_layout.addWidget(self.introLabel)

        # Target group
        self.groupTargetWD = QGroupBox(self)
        self.groupTargetWD.setObjectName("groupTargetWD")
        self.groupTargetWD.setSizePolicy(sizePolicy4)

        self.gridLayout2 = QGridLayout(self.groupTargetWD)
        self.gridLayout2.setObjectName("gridLayout2")
        self.gridLayout2.setContentsMargins(0, 0, 0, 0)

        self.targetLabel = QLabel(self.groupTargetWD)
        self.targetLabel.setObjectName("targetLabel")
        self.targetLabel.setText("Browse target file...")
        self.targetLabel.setSizePolicy(sizePolicy4)
        self.targetLabel.setMinimumWidth(300)
        self.targetLabel.setDisabled(True)
        self.targetLabel.setFrameShape(QFrame.Box)
        self.gridLayout2.addWidget(self.targetLabel, 0, 0, 1, 2, Qt.AlignLeft)

        self.browseTargetButton = QPushButton("  Browse", self.groupTargetWD)
        self.browseTargetButton.setObjectName("browseTargetButton")
        browseIcon = QPixmap(":/Browse.png")
        self.browseTargetButton.setIcon(QIcon(browseIcon))
        self.browseTargetButton.setIconSize(QSize(30, 30)) 
        self.browseTargetButton.setSizePolicy(sizePolicy)
        sizePolicy.setHeightForWidth(self.browseTargetButton.sizePolicy().hasHeightForWidth())
        self.browseTargetButton.clicked.connect(self.browseTarget)
        self.gridLayout2.addWidget(self.browseTargetButton, 0, 1, 1, 1, Qt.AlignRight)
        
        work_space_layout.addWidget(self.groupTargetWD)

        # Ligand group
        self.groupLigandWD = QGroupBox(self)
        self.groupLigandWD.setObjectName("groupLigandWD")  # Fixed object name
        self.groupLigandWD.setSizePolicy(sizePolicy4)

        self.gridLayout3 = QGridLayout(self.groupLigandWD)
        self.gridLayout3.setObjectName("gridLayout3")  # Use a different layout object name
        self.gridLayout3.setContentsMargins(0, 0, 0, 0)

        self.ligandLabel = QLabel(self.groupLigandWD)
        self.ligandLabel.setObjectName("ligandLabel")
        self.ligandLabel.setText("Browse ligand file...")
        self.ligandLabel.setSizePolicy(sizePolicy4)
        self.ligandLabel.setDisabled(True)
        self.ligandLabel.setFrameShape(QFrame.Box)
        self.ligandLabel.setMinimumWidth(300)
        self.gridLayout3.addWidget(self.ligandLabel, 0, 0, 1, 2, Qt.AlignLeft)

        self.browseLigandButton = QPushButton("  Browse", self.groupLigandWD)
        self.browseLigandButton.setObjectName("browseLigandButton")
        browseIcon = QPixmap(":/Browse.png")
        self.browseLigandButton.setIcon(QIcon(browseIcon))
        self.browseLigandButton.setIconSize(QSize(30, 30)) 
        self.browseLigandButton.setSizePolicy(sizePolicy)
        self.browseLigandButton.setMinimumWidth(100)
        self.browseLigandButton.clicked.connect(self.browseLigand)
        sizePolicy.setHeightForWidth(self.browseLigandButton.sizePolicy().hasHeightForWidth())
        self.gridLayout3.addWidget(self.browseLigandButton, 0, 1, 1, 1, Qt.AlignRight)

        work_space_layout.addWidget(self.groupLigandWD)

        # Start button
        self.startButton = QPushButton(self)
        self.startButton.setObjectName("startButton")
        self.startButton.setText("V I S U A L I Z E!")
        self.startButton.setSizePolicy(sizePolicy3)
        self.startButton.setMinimumHeight(50)
        self.startButton.setMaximumHeight(50)
        self.startButton.clicked.connect(self.visualize)
        #self.gridLayout4.addWidget(self.startButton, 0, 1, 1, 2, Qt.AlignCenter)

        work_space_layout.addWidget(self.startButton, Qt.AlignCenter)

        # Add the group widget to the workspace layout.
        central_widget_layout.addLayout(work_space_layout)
        central_widget.setLayout(central_widget_layout)
        self.setCentralWidget(central_widget)

    def on_downloadRequested(self, download):
        directory = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        filename = QtCore.QFileInfo(download.path()).fileName()
        download.setPath(QtCore.QDir(directory).filePath(filename))
        download.accept()

    def browseLigand(self):
        self.ligandLabel.setText(QFileDialog.getOpenFileName(None, 'Open file',"", "PDBQT File (*.pdbqt)")[0])

    def browseTarget(self):
        self.targetLabel.setText(QFileDialog.getOpenFileName(None, 'Open file',"", "PDB File (*.pdb)")[0])

    def visualize(self):
        # Start the HTTP server in the background
        self.httpserver = HttpDaemon()
        self.httpserver.start()
        
        if self.ligandLabel.text() and self.targetLabel.text():
            liglocation = self.ligandLabel.text()
            reclocation = self.targetLabel.text()

            now = os.getcwd()
            folder_name = 'Selected_Docked_Compelex(es)'
            path = os.path.join(now, folder_name)
            if not os.path.exists(path):
                os.mkdir(path)

            # Process file names
            ligname = os.path.basename(liglocation).split('.')[0]
            recname = os.path.basename(reclocation).split('.')[0]
            
            # Read ligand file; skip lines with "REMARK"
            with open(liglocation, 'r') as f:
                ligfile = f.readlines()
            ligprot = [
                line
                for line in ligfile
                if 'REMARK' not in line
                and 'MODEL' not in line
                and 'ENDMDL' not in line
            ]
            
            # Read receptor file; include ATOM lines and HETATM (except water)
            with open(reclocation, 'r') as f:
                recfile = f.readlines()
            recprot = []
            for line in recfile:
                if line.startswith('ATOM'):
                    recprot.append(line)
                elif line.startswith('HETATM') and ' HOH ' not in line:
                    recprot.append(line)

            # Create complex PDB file
            complex_file = os.path.join(now, "{}_{}_complex.pdb".format(recname, ligname))
            with open(complex_file, 'w') as comfile:
                comfile.writelines(recprot)
            with open(complex_file, 'a') as comfile:
                comfile.writelines("TER\n")
            with open(complex_file, 'a') as comfile:
                comfile.writelines(ligprot)
            comp = os.path.basename(complex_file)
            compname = "{}_{}_complex.html".format(recname, ligname)

            # Build HTML document for visualization
            visDoc = f"""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  <title>IDv2 Visualizer</title>
  <script src="https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs/webcomponents-lite.js" charset="utf-8"></script>
  <script src="https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js" charset="utf-8"></script>
  <link rel="stylesheet" type="text/css" href="https://www.ebi.ac.uk/pdbe/pdb-component-library/css/pdbe-molstar-3.1.2.css">
  <script type="text/javascript" src="https://www.ebi.ac.uk/pdbe/pdb-component-library/js/pdbe-molstar-component-3.1.2.js"></script>
</head>
<body>
  <h4>IDv2 Visualizer</h4>
  <div id="myViewer">
    <pdbe-molstar custom-data-url="http://{HOST}:{port}/{folder_name}/{comp}" bg-color-r="255" bg-color-g="255" bg-color-b="255" hide-controls="true" custom-data-format="pdb" expanded="true">
    </pdbe-molstar>
  </div>
</body>
</html>"""

            # Save HTML document
            with open(os.path.join(now, compname), 'w') as f:
                f.write(visDoc)
            
            # Optionally, create additional command files (e.g., for PyMol) and move them
            with open(os.path.join(now, "PyMolView_commands.txt"), "w") as f:
                f.write("preset.ligand_cartoon(selection='all')\n"
                        "set sphere_scale,.18\n"
                        "set ray_shadows,0\n"
                        "set bg_rgb,[1,1,1]\n"
                        "set dash_width,0.8\n"
                        "set cartoon_dumbbell_length,1.2\n"
                        "set cartoon_dumbbell_radius,.11\n"
                        "set stick_radius,.18\n"
                        "set cartoon_rect_width,.18\n"
                        "set cartoon_rect_length,1.0\n"
                        "set cartoon_fancy_helices, on\n"
                        "set cartoon_smooth_loops, on\n"
                        "set label_outline_color, black\n"
                        "set dash_color, black\n"
                        "show sphere, resn UNK")
            
            files_to_move = [comp, compname, 'PyMolView_commands.txt']
            for filename in files_to_move:
                src = os.path.join(now, filename)
                dst = os.path.join(path, filename)
                if os.path.isfile(dst):
                    os.remove(dst)
                shutil.move(src, path)

            # Create and show the web visualization window
            self.webWindow = WebEngineWindow(compname, self)
            self.webWindow.show()
    
        else:
            ID_utils.displayError("❌ Error: Please select a receptor and ligand file.")

if hasattr(Qt, 'AA_EnableHighDpiScaling'):
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
if hasattr(Qt, 'AA_UseHighDpiPixmaps'):
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)